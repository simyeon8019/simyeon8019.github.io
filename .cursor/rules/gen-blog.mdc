---
alwaysApply: true
description: "블로그 포스트 생성 규칙 - 주제를 입력하면 pages/ 폴더에 마크다운 형식으로 블로그 포스트를 생성"
---

# 블로그 포스트 생성 규칙

이 규칙은 사용자가 주제를 입력하면 `pages/` 폴더에 있는 형식에 따라 블로그 포스트를 생성하는 규칙입니다.

## 📝 블로그 포스트 형식

모든 블로그 포스트는 다음 형식을 따라야 합니다:

### Frontmatter 형식

```markdown
---
title: "게시글 제목"
date: YYYY-MM-DD
tags: ["태그1", "태그2", "태그3"]
category: "카테고리명"
description: "게시글에 대한 간단한 설명 (SEO용)"
---
```

### 본문 구조

1. **제목**: H1 태그로 메인 제목
2. **소개**: 간단한 소개 문단
3. **섹션들**: H2 태그로 주요 섹션 구분
4. **코드 블록**: 언어 태그와 함께 작성
5. **결론**: 마무리 문단

## 🔍 웹 검색 활용 (Tavily MCP 필수)

블로그 포스트 작성 시 **반드시 Tavily MCP를 사용**하여 다음 사항을 준수해야 합니다:

1. **Tavily MCP 필수 사용**: 모든 블로그 포스트 작성 전에 `mcp_tavily_search_web` 도구를 사용하여 최신 정보 수집
2. **최신 정보 수집**: 주제에 대한 최신 정보를 Tavily를 통해 수집
3. **신뢰할 수 있는 출처**: 공식 문서, 기술 블로그, 뉴스 사이트 등 신뢰할 수 있는 출처 활용
4. **한국어 우선**: 가능한 한 한국어 자료를 우선적으로 활용
5. **정확한 정보**: 검색된 정보의 정확성을 확인하고 최신 버전 정보 반영

### Tavily MCP 사용 규칙 (강제)

- **검색 쿼리**: 주제와 관련된 구체적이고 명확한 검색어 사용
- **최소 검색 횟수**: 주제당 최소 3-5회의 검색 수행 (다양한 각도에서)
- **검색 범위**: 기술 문서, 튜토리얼, 공식 가이드, 최신 뉴스, 공식 문서 등 다양한 소스 활용
- **검색 결과 활용**: 검색된 정보를 바탕으로 정확하고 최신의 내용 작성
- **검색 로그**: 검색 과정과 결과를 명시적으로 기록

### 🚨 Tavily MCP 사용 강제 규칙

**절대 예외 없이 모든 블로그 포스트 작성 시 다음을 준수해야 합니다:**

1. **블로그 포스트 작성 전 반드시 Tavily MCP 검색 실행**
2. **최소 3회 이상의 다양한 검색어로 검색 수행**
3. **검색 결과를 바탕으로 내용 작성**
4. **검색 과정을 로그로 기록**

### Tavily MCP 사용 예시

```javascript
// 블로그 포스트 생성 시 반드시 실행해야 할 검색 패턴
console.log("🔍 Tavily MCP 검색 시작:", {
  topic: "주제명",
  searchCount: 0,
  timestamp: new Date().toISOString(),
});

// 1차 검색: 기본 주제 검색
await mcp_tavily_search_web({
  query: "주제명 최신 정보 2025",
  max_results: 5,
});

// 2차 검색: 구체적인 기술 검색
await mcp_tavily_search_web({
  query: "주제명 사용법 튜토리얼",
  max_results: 5,
});

// 3차 검색: 공식 문서 검색
await mcp_tavily_search_web({
  query: "주제명 공식 문서 가이드",
  max_results: 5,
});

console.log("✅ Tavily MCP 검색 완료:", {
  totalSearches: 3,
  timestamp: new Date().toISOString(),
});
```

## 📁 파일 저장 규칙

1. **파일명**: 영어로 작성, 하이픈(-)으로 단어 구분
2. **저장 위치**: `pages/` 폴더에 저장
3. **파일 확장자**: `.md` (마크다운)
4. **posts.json 업데이트**: 새 포스트 생성 시 posts.json 파일도 업데이트 필요

## 🎯 작성 가이드라인

### 내용 구성

- **실용성**: 실제로 사용할 수 있는 정보 제공
- **구체성**: 추상적인 설명보다는 구체적인 예제와 코드 포함
- **단계별 설명**: 복잡한 내용은 단계별로 나누어 설명
- **시각적 요소**: 이모지, 코드 블록, 표 등을 활용하여 가독성 향상

### 코드 작성 규칙

- **언어 태그**: 모든 코드 블록에 적절한 언어 태그 추가
- **주석**: 복잡한 코드에는 한국어 주석 추가
- **실행 가능**: 제공된 코드는 실제로 실행 가능해야 함

### 로그 및 에러 처리

핵심적인 기능이나 사용자가 요청한 코드를 생성/수정할 때는 반드시 성공/실패 로그를 남겨야 합니다:

```javascript
// 성공 로그 예시
console.log("✅ 블로그 포스트 생성 성공:", {
  fileName: "example-post.md",
  title: "예제 포스트",
  timestamp: new Date().toISOString(),
});

// 실패 로그 예시
console.error("❌ 블로그 포스트 생성 실패:", {
  error: error.message,
  fileName: "example-post.md",
  timestamp: new Date().toISOString(),
});
```

## 📋 생성 프로세스 (Tavily MCP 필수 - 절대 예외 없음)

**🚨 중요: 이 프로세스는 절대 건너뛸 수 없습니다. 모든 단계를 순서대로 실행해야 합니다.**

1. **주제 분석**: 사용자가 입력한 주제를 분석하고 세부 내용 계획
2. **Tavily MCP 검색 (필수)**: **반드시** `mcp_tavily_search_web` 도구를 사용하여 주제에 대한 최신 정보 수집
   - **최소 3-5회의 검색 수행** (다양한 각도에서)
   - **다양한 검색어로 포괄적 정보 수집**
   - **공식 문서, 튜토리얼, 최신 뉴스 등 다양한 소스 활용**
   - **검색 과정을 로그로 기록**
3. **구조 설계**: 검색된 정보를 바탕으로 블로그 포스트의 구조와 섹션 계획
4. **내용 작성**: Tavily 검색 결과를 활용하여 마크다운 형식으로 내용 작성
5. **파일 저장**: `pages/` 폴더에 파일 저장
6. **posts.json 업데이트**: 메타데이터 업데이트

### Tavily MCP 검색 필수 체크리스트

- [ ] 1차 검색: 기본 주제 + "최신 정보 2025"
- [ ] 2차 검색: 주제 + "사용법 튜토리얼"
- [ ] 3차 검색: 주제 + "공식 문서 가이드"
- [ ] 4차 검색: 주제 + "베스트 프랙티스"
- [ ] 5차 검색: 주제 + "문제 해결 방법"

**모든 체크리스트를 완료한 후에만 블로그 포스트 작성을 시작할 수 있습니다.**

## 🚨 주의사항 (절대 준수)

- **🚨 Tavily MCP 필수**: 모든 블로그 포스트 작성 시 반드시 Tavily MCP를 사용해야 함 (예외 없음)
- **검색 로그 필수**: 모든 검색 과정을 로그로 기록하고 결과를 명시
- **저작권**: 다른 사람의 글을 그대로 복사하지 말고 참고하여 원작 작성
- **정확성**: 기술적 정보는 Tavily 검색 결과와 공식 문서를 통해 확인
- **최신성**: 기술 관련 내용은 Tavily를 통해 수집한 최신 버전 기준으로 작성
- **한국어**: 모든 내용은 한국어로 작성 (코드 주석 포함)

### Tavily MCP 미사용 시 경고

**Tavily MCP를 사용하지 않고 블로그 포스트를 작성하는 것은 절대 금지됩니다.**

- Tavily MCP 없이 작성된 포스트는 즉시 삭제
- 검색 과정이 기록되지 않은 포스트는 승인되지 않음
- 최신 정보가 반영되지 않은 포스트는 품질 기준에 미달

## 📚 참고 파일

- [example.md](mdc:pages/example.md) - 블로그 포스트 예시
- [javascript-es6.md](mdc:pages/javascript-es6.md) - 기술 튜토리얼 예시
- [posts.json](mdc:posts.json) - 포스트 메타데이터 파일

## 필수사항

블로그 글을 작성하고 나서 항상 `node .github/scripts/generate-posts.js`를 실행하여 posts.json 파일을 생성하세요.
